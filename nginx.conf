events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # Docker's DNS resolver
    resolver 127.0.0.11 valid=10s ipv6=off;

    # Main server block
    server {
        listen 80;
        server_name danielkoryat.com www.danielkoryat.com;

        # Define upstream variables to prevent startup failures
        set $upstream_blue daniel-koryat-portfolio-blue:3000;
        set $upstream_green daniel-koryat-portfolio-green:3000;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;

        # Health check endpoint for nginx itself
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Error handling when backends are unavailable
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # API routes with rate limiting - TRY BLUE FIRST, FALLBACK TO GREEN
        location /api/ {
            limit_req zone=api burst=5 nodelay;
            
            # Try blue first, fallback to green if blue fails
            proxy_pass http://$upstream_blue;
            proxy_intercept_errors on;
            
            # If blue fails, try green
            error_page 502 503 504 = @fallback_green_api;
        }

        # Fallback location for API when blue fails
        location @fallback_green_api {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://$upstream_green;
            proxy_intercept_errors on;
        }

        # Static files caching - TRY BLUE FIRST, FALLBACK TO GREEN
        location /_next/static/ {
            proxy_pass http://$upstream_blue;
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_intercept_errors on;
            
            # If blue fails, try green
            error_page 502 503 504 = @fallback_green_static;
        }

        # Fallback location for static files when blue fails
        location @fallback_green_static {
            proxy_pass http://$upstream_green;
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_intercept_errors on;
        }

        # All other requests - TRY BLUE FIRST, FALLBACK TO GREEN
        location / {
            proxy_pass http://$upstream_blue;
            proxy_intercept_errors on;
            
            # If blue fails, try green
            error_page 502 503 504 = @fallback_green;
        }

        # Fallback location for all other requests when blue fails
        location @fallback_green {
            proxy_pass http://$upstream_green;
            proxy_intercept_errors on;
        }
    }
}
