name: üöÄ Quick Deploy (No Security Scan)

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  CONTAINER_PREFIX: daniel-koryat-portfolio
  CONTAINER_PORT: '3000'

jobs:
  deploy:
    name: üöÄ Deploy Application
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
    
    - name: üîß Setup Docker Compose Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.docker/cli-plugins/docker-compose
          /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yml') }}
        restore-keys: |
          ${{ runner.os }}-docker-
    
    - name: üßπ Clean Up Existing Containers
      run: |
        echo "üßπ Force removing any existing containers to prevent name conflicts..."
        docker rm -f "${{ env.CONTAINER_PREFIX }}-blue" 2>/dev/null || true
        docker rm -f "${{ env.CONTAINER_PREFIX }}-green" 2>/dev/null || true
        docker container prune -f
        echo "‚úÖ Container cleanup completed"
    
    - name: üîß Create Initial Upstream Config
      run: |
        if [ ! -f active_upstream.conf ]; then
          echo "Creating initial active_upstream.conf, pointing to blue..."
          echo "set \$active_upstream ${{ env.CONTAINER_PREFIX }}-blue:${{ env.CONTAINER_PORT }};" > active_upstream.conf
        fi
    
    - name: üåê Ensure Core Infrastructure
      run: |
        echo "üöÄ Ensuring nginx and cloudflared are running..."
        docker compose up -d --remove-orphans nginx
        
        # Enhanced health check with timeout
        timeout_seconds=60
        elapsed=0
        
        while [ $elapsed -lt $timeout_seconds ]; do
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' portfolio-nginx 2>/dev/null || echo "starting")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "‚úÖ Nginx is healthy!"
            docker compose up -d --remove-orphans cloudflared
            break
          fi
          echo "‚è≥ Waiting for Nginx to be healthy... (Status: ${HEALTH_STATUS})"
          sleep 6
          elapsed=$((elapsed + 6))
        done
        
        if [ $elapsed -ge $timeout_seconds ]; then
          echo "‚ùå Nginx failed to start within timeout. Check logs."
          docker compose logs nginx
          exit 1
        fi
    
    - name: üéØ Determine Deployment Slots
      id: determine_slots
      run: |
        if grep -q "blue" active_upstream.conf; then
          LIVE_SLOT="blue"
          DEPLOY_SLOT="green"
        else
          LIVE_SLOT="green"
          DEPLOY_SLOT="blue"
        fi
        
        echo "üîµ Live environment: ${LIVE_SLOT}"
        echo "üü¢ Deploying to: ${DEPLOY_SLOT}"
        
        echo "LIVE_SLOT=${LIVE_SLOT}" >> $GITHUB_ENV
        echo "DEPLOY_SLOT=${DEPLOY_SLOT}" >> $GITHUB_ENV
        echo "live_slot=${LIVE_SLOT}" >> $GITHUB_OUTPUT
        echo "deploy_slot=${DEPLOY_SLOT}" >> $GITHUB_OUTPUT
    
    - name: üî® Build and Deploy New Version
      run: |
        echo "üöÄ Building and deploying ${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}..."
        
        # Build with cache
        DOCKER_BUILDKIT=1 docker compose build --build-arg BUILDKIT_INLINE_CACHE=1 "${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
        
        # Deploy the new version with orphan removal
        docker compose up -d --force-recreate --remove-orphans "${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
    
    - name: üîç Wait for New Environment Health
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
        timeout_seconds=300
        elapsed=0
        
        echo "üîç Waiting for ${CONTAINER_NAME} to become healthy..."
        
        while [ $elapsed -lt $timeout_seconds ]; do
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "starting")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "‚úÖ ${CONTAINER_NAME} is healthy!"
            break
          fi
          echo "‚è≥ Waiting... (Status: ${HEALTH_STATUS}) - ${elapsed}s elapsed"
          sleep 10
          elapsed=$((elapsed + 10))
        done
        
        if [ $elapsed -ge $timeout_seconds ]; then
          echo "‚ùå ${CONTAINER_NAME} failed to become healthy. Aborting."
          docker compose logs "${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
          exit 1
        fi
    
    - name: üîÑ Switch Traffic (Zero Downtime)
      run: |
        echo "üîÑ Switching traffic from ${{ env.LIVE_SLOT }} to ${{ env.DEPLOY_SLOT }}..."
        
        # Backup current config
        cp active_upstream.conf active_upstream.conf.backup
        
        # Create a temporary config with both upstreams for smooth transition
        echo "set \$active_upstream ${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}:${{ env.CONTAINER_PORT }};" > active_upstream.conf.tmp
        echo "set \$backup_upstream ${{ env.CONTAINER_PREFIX }}-${{ env.LIVE_SLOT }}:${{ env.CONTAINER_PORT }};" >> active_upstream.conf.tmp
        
        # Atomically switch the upstream
        mv active_upstream.conf.tmp active_upstream.conf
        
        # Perform graceful nginx reload with connection draining
        echo "üîÑ Performing graceful nginx reload with connection draining..."
        
        # Send SIGUSR1 to nginx for graceful reload (drains existing connections)
        docker compose exec nginx nginx -s reload
        
        # Wait a moment for connections to drain
        echo "‚è≥ Waiting for connections to drain..."
        sleep 5
        
        # Verify the new environment is still healthy after traffic switch
        NEW_CONTAINER="${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
        HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${NEW_CONTAINER} 2>/dev/null || echo "none")
        
        if [ "${HEALTH_STATUS}" == "healthy" ]; then
          echo "‚úÖ Traffic switched successfully! New environment is healthy."
        else
          echo "‚ùå New environment is not healthy after traffic switch. Rolling back..."
          
          # Rollback to previous configuration
          mv active_upstream.conf.backup active_upstream.conf
          docker compose exec nginx nginx -s reload
          
          echo "‚ùå Deployment failed - rolled back to previous environment"
          exit 1
        fi
    
    - name: üßπ Clean Up Old Environment
      run: |
        echo "üõë Stopping the old ${{ env.LIVE_SLOT }} container..."
        docker compose stop "${{ env.CONTAINER_PREFIX }}-${{ env.LIVE_SLOT }}" || true
        
        # Clean up old images (keep last 2 versions)
        docker image prune -f --filter "until=72h" || true
    
    - name: üìä Deployment Summary
      run: |
        echo "üéâ Quick deployment complete!"
        echo "üìà Deployment Summary:"
        echo "  ‚Ä¢ Environment: ${{ inputs.environment }}"
        echo "  ‚Ä¢ Deployed Slot: ${{ env.DEPLOY_SLOT }}"
        echo "  ‚Ä¢ Previous Slot: ${{ env.LIVE_SLOT }}"
        echo "  ‚Ä¢ Container: ${{ env.CONTAINER_PREFIX }}-${{ env.DEPLOY_SLOT }}"
        echo "  ‚Ä¢ Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        
        docker compose ps 