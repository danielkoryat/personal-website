name: Deploy to Home Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      CLOUDFLARED_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
    
    steps:
    - name: 1. Checkout Code
      uses: actions/checkout@v4
    
    - name: 2. Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 3. Start Core Services
      run: |
        echo "üåê Ensuring nginx and cloudflared are running before deployment..."
        docker compose up -d nginx cloudflared

    - name: 4. Determine Deployment Slots
      id: slots
      run: |
        if grep -q "server daniel-koryat-portfolio-green:3000 backup;" nginx.conf; then
          LIVE_SLOT="blue"
          DEPLOY_SLOT="green"
        else
          LIVE_SLOT="green"
          DEPLOY_SLOT="blue"
        fi
        echo "Live environment is: ${LIVE_SLOT}"
        echo "Deploying to: ${DEPLOY_SLOT}"
        # Make these variables available to subsequent steps
        echo "LIVE_SLOT=${LIVE_SLOT}" >> $GITHUB_ENV
        echo "DEPLOY_SLOT=${DEPLOY_SLOT}" >> $GITHUB_ENV

    - name: 5. Build and Deploy Standby Environment (${{ env.DEPLOY_SLOT }})
      run: |
        echo "üî® Building and deploying the ${{ env.DEPLOY_SLOT }} container..."
        docker compose up --build -d "portfolio-${{ env.DEPLOY_SLOT }}"

    - name: 6. Wait for New Environment to be Healthy
      run: |
        CONTAINER_NAME="daniel-koryat-portfolio-${{ env.DEPLOY_SLOT }}"
        echo "üîç Waiting for ${CONTAINER_NAME} to become healthy..."
        for i in {1..30}; do
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "starting")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "‚úÖ ${CONTAINER_NAME} is healthy!"
            exit 0
          fi
          echo "   - Waiting... (Status: ${HEALTH_STATUS})"
          sleep 10
        done
        echo "‚ùå ${CONTAINER_NAME} failed to become healthy. Aborting."
        docker compose logs ${CONTAINER_NAME}
        exit 1

    - name: 7. Switch Nginx Traffic to New Environment
      run: |
        echo "üîÑ Switching Nginx traffic from ${{ env.LIVE_SLOT }} to ${{ env.DEPLOY_SLOT }}..."
        sed -i "s/server daniel-koryat-portfolio-${{ env.LIVE_SLOT }}:3000;/server daniel-koryat-portfolio-${{ env.LIVE_SLOT }}:3000 backup;/" nginx.conf
        sed -i "s/server daniel-koryat-portfolio-${{ env.DEPLOY_SLOT }}:3000 backup;/server daniel-koryat-portfolio-${{ env.DEPLOY_SLOT }}:3000;/" nginx.conf

        echo "Reloading Nginx to apply changes..."
        docker compose exec nginx nginx -s reload
        echo "‚úÖ Traffic switched successfully."

    - name: 8. Stop Old Environment (${{ env.LIVE_SLOT }})
      run: |
        echo "üõë Stopping the old ${{ env.LIVE_SLOT }} container..."
        docker compose stop "portfolio-${{ env.LIVE_SLOT }}"

    - name: 9. Show Final Status
      run: |
        echo "üéâ Deployment complete. ${{ env.DEPLOY_SLOT }} is now live."
        echo "üìä Final Container Status:"
        docker compose ps
